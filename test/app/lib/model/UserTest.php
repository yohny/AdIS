<?php
/**
 * Test class for User.
 * Generated by PHPUnit on 2012-02-09 at 21:17:53.
 *
 * @version    1.0
 * @package    AdIS
 * @subpackage UnitTests
 * @author     Ján Neščivera <jan.nescivera@gmail.com>
 *
 */
class UserTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var User
     */
    protected $object;
    protected $db;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        User::create("test", "testPassw", "www.test.sk", "zobra");
        $this->db = Context::getInstance()->getDatabase();
        $this->object = $this->db->getUserByCredentials("test","testPassw");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		if($this->db != null)//connection might have been unsuccessfull
			$this->db->query("DELETE FROM users WHERE id = {$this->object->id}");
    }

    /**
     * @covers User::setPassword
     */
    public function testSetPassword()
    {
        $this->assertEquals(FALSE, $this->object->setPassword("wrongPassw", "newPassw"));
        $this->assertEquals(TRUE, $this->object->setPassword("testPassw", "newPassw"));
    }

    /**
     * @covers User::setWeb
     */
    public function testSetWeb()
    {
        $web = "www.test2.sk";
        $this->assertEquals(true, $this->object->setWeb($web));
        $user = $this->db->getUserByPK($this->object->id);
        $this->assertAttributeEquals($web, "web", $user);
    }

    /**
     * @covers User::setLoginTimeNow
     */
    public function testSetLoginTimeNow()
    {
        $this->object->setLoginTimeNow();
        $user = $this->db->getUserByPK($this->object->id);
        $this->assertEquals((new DateTime())->getTimestamp(), $user->getLastLoginTime()->getTimestamp(), 'unexpected time difference', 1);
    }

    /**
     * @covers User::getWeb
     */
    public function testGetWeb()
    {
        $this->assertEquals("www.test.sk", $this->object->getWeb());
    }

    /**
     * @covers User::getLogin
     */
    public function testGetLogin()
    {
         $this->assertEquals("test", $this->object->getLogin());
    }

    /**
     * @covers User::hasReklamaOfSize
     */
    public function testHasReklamaOfSize()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::hasBannerOfSize
     */
    public function testHasBannerOfSize()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::__toString
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->assertEquals("test", $this->object->__toString());
    }

    /**
     * @covers User::isLoginUnique
     */
    public function testIsLoginUnique()
    {
        $this->assertEquals(FALSE, User::isLoginUnique("test"));
    }

    /**
     * @covers User::isWebUnique
     */
    public function testIsWebUnique()
    {
        $this->assertEquals(FALSE, User::isWebUnique("www.test.sk"));
    }

    /**
     * @covers User::validUrl
     */
    public function testValidUrl()
    {
        $this->assertEquals(FALSE, User::validUrl("www..test.sk"));
        $this->assertEquals(FALSE, User::validUrl("www..tešt..sk"));
        $this->assertEquals(FALSE, User::validUrl("123.test"));
        $this->assertEquals(FALSE, User::validUrl("www.test.sksk"));
        $this->assertEquals(FALSE, User::validUrl("www.test.sk/xzy"));
        $this->assertEquals(TRUE, User::validUrl("www.test.sk"));
        $this->assertEquals(TRUE, User::validUrl("test.sk"));
    }

    /**
     * @covers User::validateInput
     */
    public function testValidateInput()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::setLastRequestTime
     * @covers User::getLastRequestTime
     */
    public function testRequestTime()
    {
        $time = time();
        $this->object->setLastRequestTime($time);
        $this->assertEquals($time, $this->object->getLastRequestTime());
    }
}
?>
